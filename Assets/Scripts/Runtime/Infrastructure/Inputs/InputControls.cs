//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/GameSettings/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Tallaks.IchiNoKata.Runtime.Infrastructure.Inputs
{
    public partial class @InputControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""1968dd43-1b2b-444f-a059-c7161dfb866f"",
            ""actions"": [
                {
                    ""name"": ""PointPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5e7c4c6b-f5d5-41f4-a800-10c6a1775031"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerRelease"",
                    ""type"": ""Button"",
                    ""id"": ""f57fa148-ad4c-4cdf-a1bd-9c64c91cd175"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointPress"",
                    ""type"": ""Button"",
                    ""id"": ""e8e55981-0120-4416-a778-ba24a23ee740"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""94859e32-50e5-47f3-b445-c46e290f4959"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Editor;Touchscreen"",
                    ""action"": ""PointPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bb11821-512d-4f5e-8520-92be9bcafd36"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Editor;Touchscreen"",
                    ""action"": ""PointerRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e86dcc8-bf4d-40ce-a1f6-5f3e9acdefb8"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Touchscreen;Editor"",
                    ""action"": ""PointPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Touchscreen"",
            ""bindingGroup"": ""Touchscreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Editor"",
            ""bindingGroup"": ""Editor"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Gameplay
            m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            m_Gameplay_PointPosition = m_Gameplay.FindAction("PointPosition", throwIfNotFound: true);
            m_Gameplay_PointerRelease = m_Gameplay.FindAction("PointerRelease", throwIfNotFound: true);
            m_Gameplay_PointPress = m_Gameplay.FindAction("PointPress", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Gameplay
        private readonly InputActionMap m_Gameplay;
        private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
        private readonly InputAction m_Gameplay_PointPosition;
        private readonly InputAction m_Gameplay_PointerRelease;
        private readonly InputAction m_Gameplay_PointPress;
        public struct GameplayActions
        {
            private @InputControls m_Wrapper;
            public GameplayActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @PointPosition => m_Wrapper.m_Gameplay_PointPosition;
            public InputAction @PointerRelease => m_Wrapper.m_Gameplay_PointerRelease;
            public InputAction @PointPress => m_Wrapper.m_Gameplay_PointPress;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void AddCallbacks(IGameplayActions instance)
            {
                if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
                @PointPosition.started += instance.OnPointPosition;
                @PointPosition.performed += instance.OnPointPosition;
                @PointPosition.canceled += instance.OnPointPosition;
                @PointerRelease.started += instance.OnPointerRelease;
                @PointerRelease.performed += instance.OnPointerRelease;
                @PointerRelease.canceled += instance.OnPointerRelease;
                @PointPress.started += instance.OnPointPress;
                @PointPress.performed += instance.OnPointPress;
                @PointPress.canceled += instance.OnPointPress;
            }

            private void UnregisterCallbacks(IGameplayActions instance)
            {
                @PointPosition.started -= instance.OnPointPosition;
                @PointPosition.performed -= instance.OnPointPosition;
                @PointPosition.canceled -= instance.OnPointPosition;
                @PointerRelease.started -= instance.OnPointerRelease;
                @PointerRelease.performed -= instance.OnPointerRelease;
                @PointerRelease.canceled -= instance.OnPointerRelease;
                @PointPress.started -= instance.OnPointPress;
                @PointPress.performed -= instance.OnPointPress;
                @PointPress.canceled -= instance.OnPointPress;
            }

            public void RemoveCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameplayActions instance)
            {
                foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameplayActions @Gameplay => new GameplayActions(this);
        private int m_TouchscreenSchemeIndex = -1;
        public InputControlScheme TouchscreenScheme
        {
            get
            {
                if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
                return asset.controlSchemes[m_TouchscreenSchemeIndex];
            }
        }
        private int m_EditorSchemeIndex = -1;
        public InputControlScheme EditorScheme
        {
            get
            {
                if (m_EditorSchemeIndex == -1) m_EditorSchemeIndex = asset.FindControlSchemeIndex("Editor");
                return asset.controlSchemes[m_EditorSchemeIndex];
            }
        }
        public interface IGameplayActions
        {
            void OnPointPosition(InputAction.CallbackContext context);
            void OnPointerRelease(InputAction.CallbackContext context);
            void OnPointPress(InputAction.CallbackContext context);
        }
    }
}
